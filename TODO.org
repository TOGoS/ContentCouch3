#+TITLE: ContentCouch3 to-do list

* Bugs

** TODO Don't litter ~cache~ directories all over

~ccouch id~ run without a repository directory specified will create a
~cache~ subdirectory in the current directory.

It should either:
- Use the default ~$HOME/.ccouch/cache~
- Not bother caching ID results at all

** DONE ~upload -recurse~ doesn't seem to work

*** [2020-09-27T17:40:39-05:00] This might be due to things being marked as fully uploaded before they are actually fully uploaded.

e.g. was trying to upload wedding pix with
#+BEGIN_SRC sh
ccouch3 upload -recurse -http-server:piccouch piccouch.appspot.com \
  -command-server:zappie1 ssh tog@zappie1.nuke24.net 'ccouch3 cmd-server -sector '\''pictures'\''' ';' \
  -command-server:fs.marvin ssh tog@fs.marvin.nuke24.net 'ccouch3 cmd-server -sector '\''pictures'\''' ';' \
  urn:bitprint:6W4PVKPFENWMOKGXCTD5I7WVTFE7NDIG.BTJTX7P4CC4UXLEZH3CL6K5PAW37NLUICWYMZUY
#+END_SRC

but it wasn't recursing!

*** [2020-01-04T22:18:42-06:00] I've been having a similar problem again.
When I pass ~-no-cache~ it seems to work properly.
And when I run it for the first time after removing the remote blob presence cache file
(~uploaded-to-X-rs-text.slf2~) it seems to work properly.
Things seem to go haywire when I kill the process before it's done.
Then when I try to run it again, it just says it's done before it's done anything.

*** [2021-11-07] Some pretty hard evidence

#+BEGIN_EXAMPLE
C:\Users\togos\stuff\proj\TOGoSUtils>java -jar "C:\Users\togos\stuff\proj\ContentCouch3\CCouch3.jar" upload -repo D:\datastore\ccouch -command-server:togos-fbs plink tog@togos-fbs.nuke24.net ccouch3 cmd-server -sector apps -repo /home/tog/.ccouch ";" x-ccouch-head:/togthoms1/archives/apps/latest -recurse:scan-text-for-rdf-object-urns
SCAN_TEXT_FOR_RDF_OBJECT_URNS scan mode not supported!
Not everything indexed could be queued for upload.
Error: Some uploads did not complete successfully.
#+END_EXAMPLE

But then if I run it a second time...

#+BEGIN_EXAMPLE
C:\Users\togos\stuff\proj\TOGoSUtils>java -jar "C:\Users\togos\stuff\proj\ContentCouch3\CCouch3.jar" upload -repo D:\datastore\ccouch -command-server:togos-fbs plink tog@togos-fbs.nuke24.net ccouch3 cmd-server -sector apps -repo /home/tog/.ccouch ";" x-ccouch-head:/togthoms1/archives/apps/latest -recurse:scan-text-for-rdf-object-urns
#+END_EXAMPLE

Somehow that stuff got marked as fully cached even though scan mode wasn't even supported!
What the heck!

So I created an 'invalid' scan mode that should never work:

#+BEGIN_EXAMPLE
C:\Users\togos\stuff\proj\TOGoSUtils>java -jar "C:\Users\togos\stuff\proj\ContentCouch3\CCouch3.jar" upload -repo D:\datastore\ccouch -command-server:togos-fbs plink tog@togos-fbs.nuke24.net ccouch3 cmd-server -sector apps -repo /home/tog/.ccouch ";" x-ccouch-head:/togthoms1/archives/apps/latest -recurse:invalid -debug
For remote server 'togos-fbs'...
  Using uploaded-to-togos-fbs-rs-invalid.slf2 to remember fully-uploaded blobs
  Created CommandUploadClient togos-fbs (plink ...)
Waiting for upload clients to finish...
Indexer: D:\datastore\ccouch\heads\togthoms1\archives\apps\0...
Indexer: Hash cache says D:\datastore\ccouch\heads\togthoms1\archives\apps\0 = urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
Indexer: D:\datastore\ccouch\heads\togthoms1\archives\apps\0 = urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
Indexer: Some destinations don't yet have urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
Send head command to togos-fbs: head D:\datastore\ccouch\heads\togthoms1\archives\apps\0 urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
INVALID scan mode not supported!
Indexer: D:\datastore\ccouch\heads\togthoms1\archives\apps\0: done: urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
Send head command to togos-fbs: post x incoming-log chunk 180
Send head command to togos-fbs: chunk 180
Send head command to togos-fbs: end-chunks
Indexer: Sending EndMessage to IndexedObjectSink.
Send head command to togos-fbs: bye
Read head response from togos-fbs: ok head D:\datastore\ccouch\heads\togthoms1\archives\apps\0 urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA found
Send upload command to togos-fbs: echo fully-stored urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
Read head response from togos-fbs: ok post x incoming-log accepted
Read head response from togos-fbs: ok bye null and farewell
Send upload command to togos-fbs: bye
Read upload response from togos-fbs: ok echo fully-stored urn:bitprint:LNHTIY4K5LZHEUA637O3KTZALLIKL2SK.BXYRHRQ5F4M6SYS6YSBB5KV32R7E5GSXTXJ2UTA
Read upload response from togos-fbs: ok bye null and farewell
Upload clients all completed.
Waiting for index thread to finish...
Index thread completed.
Not everything indexed could be queued for upload.
Error: Some uploads did not complete successfully.
#+END_EXAMPLE

I would expect it to say "Indexer: Marking (something) fully uploaded' if it were FlowUploader erroneously
adding those messages, but that's not in there.

Wait, what is this, in ~runUpload~ ~IndexRunner~:

#+BEGIN_SRC java
                                        if( ut.commitConfig != null ) {
                                                CommitManager.CommitSaveResult csr = getCommitManager().saveCommit(
                                                        new File(ut.path), indexResult.urn, timestamp, ut.commitConfig );

                                                SmallBlobInfo commitBlobInfo = new SmallBlobInfo( csr.latestCommitDataUrn, csr.latestCommitData );
                                                for( IndexedObjectSink d : indexedObjectSinks ) {
                                                        // Log the commit and send the data to any server that doesn't have it
                                                        if( !d.contains(csr.latestCommitDataUrn) ) {
                                                                String message =
                                                                                "[" + new Date(System.currentTimeMillis()).toString() + "] Uploaded\n" +
                                                                                "Commit '" + ut.name + "' = " + csr.latestCommitUrn;
                                                                        LogMessage lm = new LogMessage(BlobUtil.bytes(message));
                                                                        d.give( lm );
                                                                d.give( commitBlobInfo );
                                                                d.give( new FullyStoredMarker(csr.latestCommitDataUrn) );
                                                        }

                                                }

                                                if( ut.commitConfig.headName != null ) {
                                                        int headNum = getHeadManager().addHead(ut.commitConfig.headName, 0, csr.latestCommitData);
                                                        PutHead ph = new PutHead( ut.commitConfig.headName, headNum, csr.latestCommitDataUrn );
                                                        String headNameUrn = "ccouch-head:"+ut.commitConfig.headName+"/"+headNum;
                                                        for( IndexedObjectSink d : indexedObjectSinks ) {
                                                                // Send the head to any server that doesn't have it
                                                                if( !d.contains(headNameUrn) ) {
                                                                        d.give( ph );
                                                                        d.give( new FullyStoredMarker(headNameUrn) );
                                                                }
                                                        }
                                                }
                                        }
#+END_SRC

It looks like...when creating commits, FullyStoredMarkers are unconditionally pushed to blob sinks.
That is probably bad!

*** Fixed by 3.6.0, I think

It seems like FullyStoredMarkers were being inappropriately returned from CommandUploadClient.

** ccouch3-cache has some issues

#+BEGIN_SRC sh
until ccouch3-cache -sector pictures -recurse \
  urn:bitprint:Q6BPLTU7V6343HKVNOVPO6HB3VQZZC77.B23Q74BEQAGIN4GJGCAC32EJ6OEWQL4LRTFA2TY
do
    echo "Maybe next time"
done
#+END_SRC

Different numbers of resources failing to cache each time; sometimes
17, sometimes 27, sometimes 28.  Wth.

* Features

- [ ] ~checkout~, ~checkin~ commands
  - Should read/write ~.ccouch-uri~ files, respectively
  - Note that there is already a 'copy' command that might do similar things
- [ ] ~purge~ command [2019-11-25]
- [ ] Allow ~x-rdf-subject:~ URNs to be passed to ~-cache~ and Do The Right Thing
  (i.e. cache the referenced blob) [2019-11-25]
- [ ] Add ~/uri-res/browse/~ support so you can click URNs [2019-11-25]
- [ ] Glean local repo from ~ccouch_repo_dir~ environment variable [2019-11-25]
- [ ] Glean remote repos from ~remote-repos.lst~ [2019-11-25]
- [ ] "-upload-queue-size 99999" option to upload
  so that slow servers don't prevent indexer from finishing or fast
  servers from being uploaded to
- [ ] When -n (name) is given, report that instead of path in log
- [ ] When -m and/or -a are given, create a commit and log its URN in addition or in place of the file URN

* Done

- [X] Online help text
- [X] Upload to multiple servers at once
- [X] Fix uploading zero-length file bug
- [X] Link to server error message instead of including inline
- [X] ~-recurse:scan-text-for-rdf-object-urns~
  - Implemented [2019-11-25] in 47a1eb2ab5ad15958dde94b03c69cfe18013ae27
